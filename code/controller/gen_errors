#!/usr/bin/python3
import io
import re
import shutil

errors = {
	"SUCCESS":										"Success",
	"ERR_EEPROM_VERSION_INVALID":					"EEPROM version invalid",
	"ERR_EEPROM_HASH_INVALID":						"EEPROM hash invalid",
	"ERR_FLASH_HASH_INVALID":						"FLASH hash invalid",
	"ERR_RELAIS_VOLTAGE_MISSING":					"Relais voltage missing",
	"ERR_RELAIS_VOLTAGE_MISSING_EMERGENCY":			"Relais voltage missing because of emergency button",
	"ERR_SLAVE_DEFECT_FRONTPANEL":					"Defective frontpanel slave",
	"ERR_SLAVE_DEFECT_CURRENTMONITOR":				"Defective current monitor slave",
	"ERR_SLAVE_DEFECT_VOLTAGEMONITOR":				"Defective voltage monitor slave",
}

symbols = [ ]
regex = re.compile("^\s+(?P<symbol>[A-Z_]+),")
for line in open("Errors.h", "r"):
	result = regex.match(line)
	if result:
		result = result.groupdict()
		symbol = result["symbol"]
		symbols.append(symbol)

def generate():
	f = io.StringIO()
	print("/************ BEGIN OF AUTOGENERATED SECTION ************/", file = f)
	for symbol in symbols:
		if errors.get(symbol) is None:
			raise Exception("Error defined in header, but no descriptive text: %s" % (symbol))
		text = errors[symbol]
		print("static const char NAME_%s[] PROGMEM = \"%s\";" % (symbol, symbol), file = f)
		print("static const char DESC_%s[] PROGMEM = \"%s\";" % (symbol, text), file = f)

	print(file = f)
	print("static const char* const errorStringSymbolNames[] PROGMEM = {", file = f)
	for symbol in symbols:
		print("	[%s] = NAME_%s," % (symbol, symbol), file = f)
	print("};", file = f)

	print(file = f)
	print("static const char* const errorStringDescriptions[] PROGMEM = {", file = f)
	for symbol in symbols:
		print("	[%s] = DESC_%s," % (symbol, symbol), file = f)
	print("};", file = f)
	print("/************ END OF AUTOGENERATED SECTION ************/", file = f)
	return f.getvalue()


autosection = generate()
outfile = open("Errors.c_new", "w")
infile = open("Errors.c", "r")
skip = False
for line in infile:
	if "BEGIN OF AUTOGENERATED SECTION" in line:
		skip = True
		outfile.write(autosection)
	elif "END OF AUTOGENERATED SECTION" in line:
		skip = False
		continue
	if not skip:
		outfile.write(line)
outfile.close()
infile.close()

shutil.move("Errors.c_new", "Errors.c")
